c#강의 기록
win32 -> 운영체제
.net 프로그램 -> CLR -> 운영체제

C# 언어 컴파일 과정
C# 코딩 -> 컴파일 -> .NET Franmework -> 실행
   visual Studio            

C#언어
-C++에서 파새오딘 객체 지향 언어
-형식 안정성
-java특징 + C, C++

C#프로그래밍
-입문자에게 적합한 언어
-메모리 관리가 쉽다(Garbage Collector)
-다양한 라이브러리 지원

.NET아키텍처 구성 요소
https://docs.microsoft.com/ko-kr/dotnet/architecture/

비주얼 스튜디오 색깔별 의미
회색 : 사용하지 않고 있음(지워도 프로그램에 영향 안감)
파랑색 : 예약어(키워드)
초록,하얀색 : 함수

프로잭트가 여러가지가 있다면 솔루션 탐색기에서 시작프로그램 설정하면 그것만 빌드됨
빌드에서 원하는 것만 빌드 할 수 있음

Using : 선언된 네임스페이스 내부 개체들에 접근
	Using System말고 System.Console로 사용 가능
namespace : 그룹화 | 동일한 함수의 이름 사용 가능
class : 필드(field)(변수나 데이터를 묶어 두는 것), 메소드로(method)(함수)로 분리 | 프로그램을 구성하는 기본
세미클론 ' ; ' : 코드 문장의 끝
브레이스 ' {} ' : 코드 블록(블록 단위로 코드 구분)
주석 : 한 줄 주석(//) | 여러 줄 주석(/* */)

Static void Main
-가장 중요한 메소드
-최초의 진입점(Entry Point)
-메인 메소드가 반드시 존재
-프로젝트명: 002_HelloWorld2

형태가 다양한 Main함수
-함수가 가지는 특성
-프로젝트명: 003_HelloWorld3

Console 도큐먼트
https://docs.microsoft.com/ko-kr/dotnet/api/system.console?view=netframework-4.7.2

변수(Variable)
-데이터를 저장하기 위한 공간
-변수 선언("변수 만든다")로 표현

-데이터형식과 식별자(이름)으로 구성
-int num; //int(데이터 형식),num(식별자)

데이터 형태(정수)
https://rednooby.tistory.com/41
-가장 빈번하게 사용되는 형태
-소스코드(008_Data1)
-소스코드(009_Data2)
-소스코드(010_Data3)

-정수 리터럴 접두사(10진수는 암묵적 변환)
 - 2진수: 0b(OB) -> 0b00001111
 - 16진수: 0x(OX) -> 0xFF
-소스코드(011_Data4)

데이터 형태(부동 소수점, 실수)
https://rednooby.tistory.com/41
-소스코드(012_Data5)
 - 리터럴 접미사
   -float(f), decimal(m)에만 사용(대부분 암묵적 변환)
   -float f = 123.345f;, decimal d = 1234567891234567m;
   -소스코드(013_Data6)

문자 - char
 - 작은 따옴표(' ')
 - char a = 'A';

문자열 - string
 - 문자가 모여있는(열)
 - 쌍따옴표(" ")
 - string s = "abcdefg";
-소스코드(014_Data7)
-소스코드(015_Data8)

문자열 제어
 - '+': 두개의 문자열을 합
   - "Hello" + "World"
 - '==': 두개의 문자열 비교
   - "Hello" == "World"
 
 -Replace: 특정 문자를 변경
 -ToUpper(): 모두 대문자
 -ToLower(): 모두 소문자
다른것도 많으니 한 번 찾아보기
-소스코드(016_String)

bool
 - 논리 데이터 형태(참과 거짓)(True and False)
 - 기본값은 false
 - 조건문에 자주 사용
-소스코드(017_Data_bool)

object
 - 객체 데이터 형태
 - 어떤 데이터 형이든 모두 처리 가능
 - 클래스에 상속이 적용
-소스코드(018_Data_object)

enum
 - 열거형 데이터 형태
 - enum 식별자(이름)
   enum DAY_OF_WEEK
   {
	SUN,
	MON,
	THE,
	WED,
	THU,
	FRI,
	SAT
   }
-소스코드(019_Data_enum, 020_Data_enum2)

nullable형식
 - 기존 데이터형의 값 + null값 저장이 가능
 - 사용법: 데이터 자료형? 식별자
 - int? num = 100;
 - HasValue, Value 사용
-소스코드(021_Date_nullable)

var
 - 암시적 형식 지역 변수
 - 선언과 동시에 초기화
 - 지역 변수로만 사용 가능
 - 'for ~ each'에서 자주 사용
-소스코드(022_Date_var)

const
 - 상수
 - 기존 변수 선언에 const 추가
 - const int NUM = 100;
-소스코드(023_Data_const)

형 변환
 - 데이터의 형식을 변경
    - 정수 <-> 실수
    - 문자열 <-> 기본 데이터형
 - 캐스트연산자: '()'
 - ToString()
 - Parse()
 - Convert.~

-소스코드(024_Data_cast)
-소스코드(025_Data_ToString, 026_Data_Parse, 027_Data_Convert)

값형식 vs 참조형
 - 값형식(Value) (call by value)
    - 모든 수치행태, char, bool, enum...
    - 두개의 변수가서로 영행을 주지 않음

 - 참조형(Reference) (call by reference)
    - 배열, string, class, interface, delegate
    - 두개의 변수가 서로 영향을 준다
    - 값을 저장하는 것이 아닌 주소를 참조

- 소스코드(028_Data_reference)

boxing과 unboxing
int i = 123;  // a value type
object o = i;  //boxing
int j = (int)o;  //unboxing
엄청 무거워짐
박싱과 언박싱은 최소한 해야함 무조건
- 소스코드(029_Data_boxing)

Console.ReadLine()
 - 한 번에 한 줄씩 문자열로 입력 받음
- 소스코드(030_ReadLine)
- 소스코드(031_ReadLine)

프로그램 제어하기1

단항 연산자
 - 한 개의 데이터로 처리
이항 연산자
 - 두개의 데이터로 처리
삼항 연산자
 - 세개의 데이터로 처리

연산자(Operators)
산술 연산자
 - +, -, *, /, %
 - 모든 수치 데이터 형태
- 소스코드(034_Operator1)
- 소스코드(035_Operator2)

증감 연산자
 - 단항 연산자
 - '++', '--'
 - 전치 연산, 후치 연산
 -    ++x        x++
- 소스코드(036_Operator3)

할당 연산자
 - '=', '+=', '-=', '*=', '/=', '%='
 - 연산 후 재할당
ex)
A += 5
A = A + 5
- 소스코드(036_01_Operator3)

관계 연산자
 - 피연산자의 비교(bool) (true, false)
 - 조건문에 사용을 한다.
 - '<', '>', '<=', '>=', '==', '!='
- 소스코드(037_Operator4)

논리 연산자
 - 조건부 논리('&&', '||')
 - 논리 부정 연산자('!')
- 소스코드(038_Operator5)

조건 연산자
 - 삼항 연산자
 - '?:'

조건식 ? 처리1 : 처리2
true면 처리1로 가고
false면 처리2로 간다.
- 소스코드(039_Operator6)

비트 연산자
 - 비트 단위로 데이터를 처리
 - '<<' , '>>' //shift 연산자
비트 논리 연산자
 - '&','|','^','~'
 - and, or, xor, not
 - xor은 같지 않으면 1을 출력한다.
0 xor 0 = 0
0 xor 1 = 1
1 xor 0 = 1
1 xor 1 = 0

쓰는 이유
불필요한 메모리를 최소화 할 수 있음
연산이 매우 빠름
최적화가 쉬움

게임에서 옵션값으로 켜고 끄고
토글값으로 편하게 끄고 킬수있다.

- 소스코드(040_Operator_Bit)

null 병합 연산자
 - null 값을 체크하는 연산자
- 소스코드(041_Operator_null)

연산자 우선순위
https://learn.microsoft.com/ko-kr/dotnet/csharp/language-reference/operators/

프로그램 제어하기2
*중요*

지역변수
 - {}(브레이스)코드 블록 내부에 선언
 - 코드 블록 외부에서는 사용 불가

분기문(branch) - if
 - 특정 조건을 이용하여 코드를 다른 섹션으로 분기
 - if, if ~ else, if ~ else if ~ else
    - if(조건식){
      
      }
 - 중첩으로 사용 가능
- 소스코드(042_Operator_Branch)
- 소스코드(043_Operator_Branch2)
- 소스코드(044_Operator_Branch3)

분기문(branch) - switch
 - switch: if문과 다르게 여러 개의 조건식이 있을 경우
    - switch(조건)
      {
          case 조건:
          break;

          case 조건:
          break;
      }
- 소스코드(045_Operator_switch)
- 소스코드(046_Operator_switch)

반복문 - for,while,do ~ while
 - while(조건문){
		(반복되는 코드)
   }

 - do{
		(반복되는 코드)
   }while(조건문); //세미클론 꼭 찍어야함

 - for(초기식, 조건식, 증감식){
		(반복되는 코드)
   }
- 소스코드(047_Operator_while, 048_operator_do~while)
- 소스코드(049_Operator_for)

반복문 - 중첩 for, foreach
 -중첩 for
    - for( ; ; ){
          for( ; ; ){
              
          }
      }
 - foreach
   - for문과 동일하게 작동
   - 차후에 배열, Collection에서 사용
- 소스코드(050_Operator_for_for)

무한 반복 - while, for
 - while(true){
   
   }

 - for(;;){
   
   }
- 소스코드(051_Operator_while(true))

점프문(break, continue, goto)
 - 무한루프 제어
    - break
    - continue
    - goto //자주 쓰이지 않음
- 소스코드(052_Operator_break)
- 소스코드(053_Operator_continue)
- 소스코드(054_Operator_goto)

함수 처음 배워보기

메소드(함수)
 - 특정코드를 모아둔 코드 블록( { ~ } )
 - 특정 기능을 분리해서 처리

static void Print()
{
	Console.WriteLine("Hello World");
}

 - |접근 지정자| |반환 데이터형식| |메소드명(매개 변수, ...)|

함수의 형태1
 - 리턴형(X), 파라미터(X)
-소스코드(058_Func1)

함수의 형태2
 - 리턴형(O), 파라미터(X)
-소스코드(059_Func2)

함수의 형태3
 - 리턴형(O), 파라미터(O)
-소스코드(060_Func3, 061_Func4)

함수의 형태4
 - 리턴형(X), 파라미터(O)

Call by Value
 - 값에 의한 호출
 - 함수에서 값에 영향을 주지 않는다.
 - 일반 함수
 - void swap(int a, int b)

Call by Refrence
 - 주소에 의한 호출
 - 함수에서 값에 영향을 준다.
 - ref 키워드를 가지는 함수
 - void swap(ref int a, ref int b)
-소스코드(062_FuncSwap) 

함수 제대로 활용해보기

out
 - ref키워드 처럼 레퍼런스 (주소값)
 - 전달하는 변수 초기화 없이 사용 가능
 - static void InitNum(out int addNum)
-소스코드(063_Func_out)

디폴트 매개 변수(default parameter)
 - 초기화 파라미터
 - 반드시 파라미터 뒤에서부터 순차적 초기화
-소스코드(064_Func_default)

매소드 오버로딩
 - 메소드 이름이 중복
 - 파라미터의 형식 다르게
 - 파라미터의 수 다르게
static int Add(int a, int b)
static int Add(int a, int b, int c)
static int Add(float a, float b)
-소스코드(065_Func_Overloading)

params
 - 파라미터 제한 없이 처리
 - int Total(params int[] values)
-소스코드(066_Func_params)


처음 배워보는 배열

일차원 배열
 - 변수 선언이 많아지는 경우
 - 동일한 데이터형

 - 배열의 GetType()

 - int[] arrNum = new int[5];

일차원 배열 선언과 초기화
 - int[] arrNum = new int[3];
 - int[] arrNum = new int[]{0, 1, 2};
 - int[] arrNum = new int[3]{0, 1, 2};
 - int[] arrNum = {0, 1, 2};

 - index란?
	- 배열에 접근하는 위치 번호
	- 인덱스는 -부터 시작(0 ~ (N-1))d
-소스코드(068_Array_Init)

foreach - 반복문
 - 읽기 전용
 - foreach(자료형|식별자 in 배열)

 foreach(int data in arrNum)
 {
	
 }
-소스코드(068_1_Array_Init2)

다차원 배열
 - 행과 열과 구분

 - int[,] arrNums = new int[3,2];

이차원 배열 선언과 초기화
 - int[,] arrNum = new int[3,2];
 - int[,] arrNum = new int[,]{{0,1},{2,3},{4,5}};
 - int[,] arrNum = new int[3,2]{{0,1},{2,3},{4,5}};
 - int[,] arrNum = {{0,1},{2,3},{4,5}};

-소스코드(069_Array_Multi)

다차원 배열 선언과 초기화
 - int[,,] arrNum = new int[4,3,2];

-소스코드(070_Array_Multi2)

가변 배열
 - 배열의 크기가 가변적
 - int[][] arrNum = new int[3][];

 - arrNum[0] = new int[2]{0,1};
 - arrNum[1] = new int[4]{0, 1, 2, 3};
 - arrNum[2] = new int[]{0,1,2};

 - int[][] arrNum = new int[2][]{
      new int[]{0,1},
      new int[3]{0,1,2}};
솔직히 잘 사용하지 않음
-소스코드(071_Array_Flex)

제대로 활용하는 배열

함수의 파라미터(매개변수)로 배열이용
 - Call by Reference

 - 리턴형 함수명(int[] 파라미터명)
 - void Func(int[] arr)

 - 리턴형 함수명(int[,] 파라미터명)
 - void Func(int[,] arr)
- 소스코드(072_Array_Func1)

함수의 리턴으로 배열이용
 - Call by Reference

 - int[] 함수명(int[] 파라미터명)
 - int[] Func(int[] arr)

 - 리턴형 함수명(int[,] 파라미터명)
 - int[,] Func(int[] arr)

반환형의 형태로 return만 해주면 문제가 되지 않음
- 소스코드(073_Array_Func2)

배열을 관리하는 방법
 - public static void Clear(Array array, int index, int length);
 - public int Length{get;}
 - public int GetLength(int dimension);
 - public object Clone();
   자기가 원하는 값으로 ()캐스팅연산을 하여 복사할 수 있음
   Call by Value

- 소스코드(074_Array_Clear);

쉽게 이해하는 클래스 문법

클래스 개념
 - 클래스는 사용자가 직접 만든 틀
 - 변수(필드)와 함수(메소드)를 하나의 단위로 결합

 - 상속, 다형성, 파생 클래스 클래스의 특수화 메커니즘
	public int x,y;
	public Point()
	{
	...
	}
}

접근 한정자(지정자) - 소스코드(077_class)
 - 클래스의 멤버에 액세스(접근) 할 수 있는 수준

public
 - 액세스가 제한되지 않음
protected
 - 이 클래스 또는 이 클래스에서 파생된 클래스로만 액세스가 제한됨
internal
 - 포함하는 클래스, 포함하는 클래스에서 파생된 클래스 또는
   동일한 어셈블리 내의 클래스로만 액세스가 제한됨
private
 - 이 클래스로만 액세스가 제한됨
private protected
 - 포함하는 클래스 또는 동일한 어셈블리 내의 포함하는 유형으로부터 파생된 클래스로만 액세스가 제한됨

new 키워드
 - 클래스의 객체 생성

 - 클래스명 객체명 = new 생성자
	AA aa = new AA();

생성자, 소멸자
 - 생성자: 객체 생성할 때 호출(new)
 - 소멸자: 객체가 소멸될 때 호출(GC) (가비지 콜렉터)

생성자
 - 클래스 명 동일
 - 리턴형 X
 - 접근 한정자 public
 - 멤버 변수 초기화(하는데 많이 사용함)
 - 객체 생성시 자동으로 처리하는 것들

소멸자
 - 클래스 명 도일
 - 리턴형 X
 - 접근 한정자 X
 - '~' 키워드로 구성
- 소스코드(078_Constructor)

this 키워드
 - 객체 자신을 참조하는 키워드
 - 사용처
	- 함수의 파라미터 이름과 멤버 변수 이름이 동일
	- 클래스 내부에서 멤버변수를 접근
- 소스코드(079_this)

static 키워드
 - 클래스의 멤버를 객체 생성 없이 사용 가능
 - 클래스 static 필드(변수)
 - 클래스 static 메소드(함수)
 - static메소드 내부에 사용하는 변수는 반드시 static
- 소스코드(080_static)

클래스이 메소드 활용
 - 클래스가 메소드의 파라미터
클래스를 파라미터로 받으면 Call by Reference 이다.

 - 클래스가 메소드의 리턴형
- 소스코드(081_class_parameter)

상속과 다형성

클래스 상속?(IS-A 관계)
 - 부모클래스: base, parent, 상위, super
 - 자식클래스: derived, child, 파생, sub
 - 클래스의 재사용

클래스 상속? - 소스코드(081_01_classInheritance)

클래스 상속 - 생성자, 소멸자
 - 상속에서 생성자 함수와 소멸자 함수
- 소스코드(081_02_classInheritance)

 - base 키워드
- 소스코드(081_03_class_base)

is 키워드
 - 객체의 형식 검사
 - bool 리턴
if(aa is BB)
else if(aa is AA)

as 키워드
 - 형식 변환
 - null 리턴
BB copyBB = bb as BB;

- 소스코드(082_as)

다형성 - virtual, override
 - 객체 지향의 핵심
 - 함수의 오버라이딩(재정의)
 - 반복문으로 객 체 관리
 public virtual void Print()
 public override void Print()
- 소스코드(083_override)

다형성

클래시 오브 클랜이라는 게임을 예라고 들자
그러면 Army라는 유닛들의 집합체에
바바리언, 아쳐, 자이언트, 고블린, 해골 병사, 벌룬, 마법사, 힐러 등...이
Army라는 클래스에 상속이 되어있다는 것이다.

- 소스코드(084_override2)

sealed 키워드 -> 상속, 재정의 불가
 - 클래스 sealed
sealed class CC
class DD : CC //CC클래스가 sealed라 오류!
 
 - 함수 sealed
class AAA
	public virtual void PrintParent()
class BBB : AAA
	public sealed override void PrintParent()
class CCC : BBB (자식의 자식)
	public override void PrintParent() // 오류

클래스 HAS - A관계
 - 클래스가 다른 클래스를 가지는 구조
 - 두 개의 클래스가 매우 강한 연관성을 가짐
- 소스코드(085_class_has_a)

parial 키워드
 - 클래스를 나누어서 구현
 - 컨텐츠별 구분해서 코딩 가능
- 소스코드(086_partial)
partial class AA

확장 메소드
 - this키워드
- 소스코드(087_extension)

클래스 vs. 구조체

	  	    		class									struct
특징	   	참조 타입(Refrence) - 힙에 생성			값 타입(Value) - 스택에 생성
사용    	new 연산자								new 연산자 없는 생성 가능
생성자	파라미터 없는 생성자 기능					반드시 파라미터가 있어야 함

 - 자료의 크기가 작을 때
 - 구조가 단순할때

- 소스코드(088_struct)

인터페이스와 추상 클래스

인터페이스 - 소스코드(089_interface)
 - 메소드, 이벤트, 인덱서, 프로퍼티, 필드 불가
 - 구현부 없음(정의)
 - 인스턴스 생성 불가(참조 가능) 
public int a; //에러 (필드 불가)
private void IPrint() {  } //에러 (private)
public void IPrint() {  } //에러 (public)
int A { get; set; } //프로퍼티 가능
void IAAPrint();

c# 다중 상속 불가
그래서 인터페이스로 다중 상속 처럼 사용 가능

특징
1. 특정 메서드나 프로퍼티를 강제적으로 오버라이드를 해야함
2.다중 상속을 해야하는 상황에서 인터페이스로 다중 상속 대안으로 사용할 수 있다.

추상 클래스 - 소스코드(090_abstract)
 - 인스턴스 생성 불가(참조 가능)
 - 구현부 없음
 - 상속 받는 클래스의 규격
상속 받은 클래스는 abstract부분을 무조건 오버라이딩해야함

상속을 구현할 때 일반 클래스로 할 수 있지만
무조건 함수의 재정의가 필요한 함수를 abstract로 만들어서 함수를
무조건 오버라이딩을 쓰게 강제성을 줄수있다.

프로퍼티
 - set, get 키워드
 - 정보은닉 (private)
get, set키워드로 값을 private속성의 필드에 넣고 값을 가져올 수 있다.
  public int  num
  {
  	  get { return num; }
	  set { num = value; }
  }
  public int Num { get; set; } = "NoName" //위에 코드가 자동으로 구현됨 //초기화도 가능
- 소스코드(091_Property01)
- 소스코드(092_Property02)

컬렉션, 인덱서

컬렉션(Collection)
 - 데이터 저장, 검색, 기타 데이터 처리 특화
 - 자료구조(DaaStructure)
 - 선언방법, 참조방법, 중요 메소드

ArrayList
 - 배열과 비슷
- 크기가 유동적(동적)
가변적으로 사용가능

ArrayList arrList = new ArrayList();

int[] arrData = { 100, 200, 300 };
ArrayList arrCopyList = new ArrayList(arrData);
- 소스코드(095_ArrayList)

Queue
 - 순차적인 데이터 처리
 - FIFO(First in First Out)
 - 게임에서 순차적 AI기능 구현
 - Dequeue(), Enqueue(), Peek()

예를 들어 설명을 해보자면
접시가 들어가는 구멍에 접시를 넣으면 접시가 나오는 구멍이 따로 있는 것이다.
그걸 데이터로 설명하면
데이터가 들어가는 곳과 나오는 곳이 분리되어 FIFO 또는 LILO 방식을 가지게 된다.

먼저들어가면 먼저나오고 늦게 들어가면 늦게 나오는 형태

Queue queue = new Queue();

int[] arrData = { 100, 200, 300 };
Queue queueCopy = new Queue(arrData);
- 소스코드(096_Queue)



Stack
 - 순차적 데이터 처리
 - LIFO(Last in First Out)
 - 뒤로 가기 기능 구현 (ctrl + z)
 - Push(), Pop(), Peek()
Queue와 반대되는 형태

예를 들어 설명을 해보자면
접시를 어떠한 통에 넣었을 때 우리는 접시를 꺼낼때 위에 있는 접시(마지막에 넣은 접시)내듯이
마지막에 접시가 가장 먼저 나가는 형태이다.

그걸 데이터로 설명을 한다면
처음 들어간 데이터는 맨 마지막으로 나오고 마지막으로 들어간 데이터는 제일 먼저 나온다는 것이다.

Stack stack = new Stack();
stack.Push("a");

int[] arrData = { 100, 200, 300 };
Stack stackCopy = new Stack(arrData);
- 소스코드(097_Stack)


Hashtable
 - 키와 값이 쌍으로 구성되는 데이터
 - 탐색 속도가 빠르고 사용이 편리

Hashtable hashTable = new Hashtable();
hashTable.Add("name", "Jack");
hashTable["weight"] = 10.8f;

Hashtable hashTableCopy = new Hashtable()
{
	["pos"] = 10,
	["name"] = "Jack",
	["weight"] = 10.8f;
}
- 소스코드(098_Hashtable)


인덱서
 - 배열 or 컬렉션의 외부 접근
 - 키워드: get, set, return, value, this[int index]

public int this[int index]
{
	get { return num[index]; }
	set { num[index] = value; }
}
- 소스코드(099_Indexer01)
- 소스코드(100_Indexer02)


일반화 프로그래밍

일반화(Generic)
 - 클래스, 함수 일반화 가능
 - <T> 키워드
 - 장점:
	- Boxing, UnBoxing을 줄일 수 있음
	- 불필요한 오버로딩을 줄일 수 있음

static void GenericPrint<T> (T data) {
	Console.WriteLine("data: {0}", data};
}

static void GenericPrint<T>(T[] arrData) {
	for(int i = 0; i < arrData.Length; i++) {
		Console.WriteLine("arrData: {0}, arrData[i]);
	}
}
- 소스코드(103_GenericFunc)

일반화(Generic)
 - 클래스 일반화

class GenericAA<T>
{
	private T num;
	public T GetNum() {
		return num;
	}

	public void SetNum(T data) {
		num = data;
	}
}

GenericAA<int> AA = new GenericAA<int>();
GenericAA<float> BB = new GenericAA<float>();
- 소스코드(104_GenericClass)


dynamic 키워드
 - object, var
 - 런타임에 변수 형식 변경 가능
 - 일반화 함수에서 변수타입 대응 가능

static T AddArray<T> (T[] arrDatas) {
	dynamic temp = 0;
}

default 키워드
 - value type: 0 초기화
 - reference type: null 초기화

T temp = default(T)
for(int i = 0; i < arrDatas.Length; i++) {
	temp += (dynamic)arrDatas[i];
}
- 소스코드(105_dynamic)

where 키워드(한정자)
 - 매개변수 제한 기능

class AA<T> where T : struct //값형식으로 제한
{
	private T sData;
}

class BB<T> where T : class
{
	private T sRefData;
}

interface II{
	void IIPrint();
}

class CC<T> where T : II //interface로 제한
{
	public T _interface;
}
- 소스코드(106_where)


일반화 컬렉션(Collections Generic)
 - 컬렉션의 박싱과 언박싱의 단점을 해결
 - List<T>
 - Queue<T>
 - Stack<T>
 - Dictionary<T>

using System.Collections.Generic;

- 소스코드(107_List, 108_Queue)
- 소스코드(109_Stack, 110_Dictionary)



예외 처리


try ~ catch 키워드
 - 프로그램의 안정성

try{
	inputNum = int.Parse(readStr);
	isCorrect = true;
}
catch(FormatExxception e){
	Console.WriteLine(e.Message);
}
- 소스코드(111_try_catch)


System.Exception
 - 예외 클래스의 Base

try {
	checked {
		maxNum += Int32.MaxValue;
	}
}
catch(OverFlowException e) {
	Console.WriteLine("e.Message: " + e.Message);
	Console.WriteLine("e.Source: " + e.Source);
}
catch(Exception e) {
	Console.WriteLine("e.Message: " + e.Message);
}
- 소스코드(112_Exception)


throw 키워드

 - 상위 호출 메소드로 예외 객체를 전달
static void ThrowFunc(int data) {
	if(data > 0) {
		Console.WriteLine("ThrowFunc data: " + data);
	}
	else {
		throw new Exception("data에 0이 입력되었습니다.");
	}
}

 - 조건 연산자에서 사용
int result = 101;
try {
	int checkNum = (result < 100) ? result : throw new Exception("100 이하만 가능");
}catch(Exception e) {
	Console.WriteLine(e.Message);
}
- 소스코드(113_throw)


try ~ catch ~ finally 키워드
 - 예외 상황과 관련 없이 무조건 처리 (예외 상황이건 예외 상황이 아니건 finally는 무조건 실행이 된다.)

try {
	ThrowFunc(0);
}
catch(Exception e) {
	Console.WriteLine(e.Message);
}
finally {
	Console.WriteLien("");
}
- 소스코드(114_finally)


사용자 정의 예외 클래스

 - 기존 예외처리 클래스에서 상속
class MyException : ApplicationException
{
	public int Num { get; set; }
	public MyExecption() : base() {
	}
	public MyException(int a) {
		Num = a;
	}

	public override string ToString() {
		return "Num: " + Num;
	}
}

 - when 키워드, StackTrace 키워드
Console.WriteLine("when(e.Num == 0)");
Console.WriteLine("MyException:  " + e.StackTrace);
- 소스코드(115_CustomException)


델리게이트와 이벤트

델리게이트(delegate)
 - 대리자(메소드 참조형)
 - 메소드의 틀을 만들어 소통
 - 클래스간 통신에 활용

 - delegate 리턴형 식별자(파라미터);
delegate int DelegateFunc(int a);

- 소스코드(116_delegate)


델리케이트 선언 방법

delegate void DelegateTest(int a, int b);

static void Sum(int a, int b) {
	Console.WriteLine("a + b = " + (a + b));
}

(미리 대리자로 사용할 함수를 만들었놓았을 때)
//1: 기본 선언
DelegateTest dt = new DelegateTest(Sum);

//2: 간략한 선언
DelegateTest dt2 = Sum;

(미리 함수를 만들어 놓지 않았을 때)
//3: 익명 함수 선언 
DelegateTest dt3 = delegate (int a, int b) {
	Console.WriteLine("a + b = " + (a + b));
};

//4: 람다식 선언
DelegateTest dt4 = (a, b) => {
	Console.WriteLine("a + b = " + (a + b));
};

dt = delegate (int a, int b)
{
	Console.WriteLine("a - b:" + (a - b));
};
이런식으로 원래 있었던 것을 재참조?정의? 가능
- 소스코드(117_delegateDeclare)


델리게이트 함수 파라미터 활용
 - 일반적인 사용

delegate void delegateFunc();

delegateFunc CallOkFunc;
delegateFunc CallCancelFunc;

public void Message(string msg, delegateFunc okFunc, delegateFunc cancelFunc)
- 소스코드(118_delegateParam)


이벤트(event)
(이벤트 사용시 델리게이트가 반드시 있어야 함)
 - delegate와 차이점
	- 할당 연산자( = ) 사용 불가
	- 클래스 외부 호출 불가
	- 클래스 멤버 필드에서 사용
 public delegate void delegateEvent(string msg);
 public event delegateEvent myEvent;
- 소스코드(119_event)

델리게이트나 이벤트는 null값이 아닌 것을 확인하고 가는 것이 좋기 때문에
if(null != myEvent)
이런식의 코드는 기본적으로 넣어두는게 좋음

델리게이트 vs 이벤트 차이점

델리게이트
내가 어떤 함수를 콜하고 그 이후에 콜백 즉 다시 처리해야 할 때에는 대리자를 많이 사용한다.

이벤트
객체 즉 클래스 내부에서 어떤 상태변화나 이벤트를 발생하는 것을 처리해야할 때 사용한다.


람다식

람다식(Rambda)
 - 익명 메소드
 - 메소드와 동일하게 입력(파라미터), 출력(리턴)
 - (매개변수) => { 함수 내부(식) };

(str) => { Console.WriteLine(str); };
da = (a) => { return a + a; }
- 소스코드(120_Rambda)


리스트와 람다식
 - 리스트 함수 중 delegate파라미터
 - Collections에서 다양하게 활용

listData.FindAll((num) => { return num < 200; });

listData.Find((num) => num % 2 == 0);
- 소스코드(121_ListRambda)


함수와 람다식
 - 함수의 파라미터

delegate void dPrint(string str);

static public void CallBackFunc(dPrint dp, string msg)

CallBackFunc(CallPrint, "Hello"); //함수 연결
CallBackFunc(delegate(string str) { Console.WriteLine(str); }, "Hello"); //delegate 직접
CallBackFunc((string str) => { Console.WriteLine(str); }, "Hello"); //람다의 식형태
CallBackFunc((str) => Console.WriteLine(str), "Hello"); //람다식 기본..

- 소스코드(122_FuncRambda)


Action과 Func
 - Action
	- 리턴값이 없는 경우

public delegate void Action();
public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);

- 소스코드(123_Action)

 - Func
	- 리턴값이 있는 경우

public delegate TResult Func<out TResult>();
public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);

- 소스코드(124_Func)


LINQ


LINQ(Language-Integrated Query)
 - 쿼리 기능
 - from: 어디에서 찾을 것인지
	from 범위 변수 in 데이터 원본

 - where: 조건이 무엇인지
	where 조건식

 - select: 어떤 것을 가져올 것인지
	select 범위 변수

var QueryData = //IEnumerable<int> QueryData =
	from temp in data
	where temp < 100 // if(temp < 100)
	select temp;

- 소스코드(125_LINQ)


select
 - 결과를 선택
 - LINQ쿼리식 끝나는 부분
 - 특정 형식으로 변환가능

var QueryData =
	from data in arrStudents
	where data._id > 200 && data._kor > 50
	select new{
		id = data._id,
		name = data._name,
		total = data._kor + data._eng
	};

- 소스코드(126_select)


orderby
 - 데이터 정렬
 - ascending 키워드(오름차순)
 - descending 키워드(내림차순)
 - "," 컴마로 둘 이상의 데이터 정렬

var QueryData =
	from data in arrStudents
	orderby(data._kor + data._eng) descending //내림차순 정렬
	orderby(data._kor + data._eng) ascending //오름차순 정렬
	select data;

- 소스코드(127_orderby)


group
 - 데이터 분류 후 그룹화
 - group A by B into C
 - A: 범위, B: 분류 기준 C: 그룹 변수

var QueryData = 
	from data in arrStudents
	orderby (data._eng + data._kor) descending
	group data by (data._ensg + data._kor) < 150;

- 소스코드 (128_group, 129_group2)


join
 - 두개의 데이터를 연결
 - 내부조인

var QueryData =
	from data in arrStudents
	join detail in arrDetails on data._name equals detaill._name
	select new {
		name = data._name,
		total = data._eng + data._kor,
		gender = (detail.gender == 0) ? "여자" : "남자"
	};

- 소스코드(130_join)

 - 두개의 데이터를 연결
 - 외부조인

var QueryData =
	from data in arrStudents
	join detail in arrDetails on data._name equals detaill._name into inData
	from detail in inData.DefaultIfEmpty(new Detail() { gender = 1 }
	select new {
		name = data._name,
		total = data._eng + data._kor,
		gender = (detail.gender == 0) ? "여자" : "남자"
	};

- 소스코드(131_join2)



파일 처리


스트림(Stream)
 - 파일, 네트워크 등에서 사용
 - File & Directory 클래스

FileStream fs = File.Create(path);
File.Exists(path)
File.GetCreationTime(path)
FileInfo fileInfo = new FileInfo("b.txt");
FileStream ff = fileInfo.Create();

ff.Close();
FIle.Copy("a.txt", "c.txt");
FileInfo dst = fileInfo.CopyTo("d.txt");

- 소스코드(132_File01)


System.IO //ms docs에서 찾아서 보기
 - 파일과 데이터 스트림에 읽고 쓸 수 있게 하는 형식
 - 기본 파일과 디렉터리 지원을 제공하는 형식
 - msdn참조


바이트 입출력
 - FileSteam, BitConverter
 - 데이터 형식을 byte 배열로 변환(BitConverter)
 - 사용빈도 낮음

- 소스코드(133_File_BitConverter)


텍스트 입출력
 - StreamWriter, StreamReader

- 소스코드(134_File_StreamWriterReader)


사용자 자료 입출력
 - [Serializable]
 - BinaryFormatter, Serialize, Deserialize
 - 사용빈도 높음

- 소스코드(135_File_BinaryFormatter)
- 소스코드(136_File_BinaryFormatter02)
